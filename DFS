from collections import defaultdict

class Graph:
    def __init__(self):
        self.adj_list = defaultdict(list)

    # Add an edge (undirected)
    def add_edge(self, u, v):
        self.adj_list[u].append(v)
        self.adj_list[v].append(u)

    # Recursive DFS
    def dfs(self, start):
        visited = set()
        print("DFS:", end=" ")
        self._dfs_helper(start, visited)
        print()

    def _dfs_helper(self, vertex, visited):
        visited.add(vertex)
        print(vertex, end=" ")

        for neighbor in self.adj_list[vertex]:
            if neighbor not in visited:
                self._dfs_helper(neighbor, visited)


# Example usage
if __name__ == "__main__":
    graph = Graph()
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 3)
    graph.add_edge(1, 4)
    graph.add_edge(2, 5)
    graph.add_edge(2, 6)

    graph.dfs(0)  # Recursive DFS
